@page "/ProductsGrid"
@inject HttpClient Http
@using System.Net.Http.Json

<section class="container mx-auto p-10">
    <h1 class="text-2xl font-bold text-center mb-6">Products Grid</h1>

    <!-- Grid for displaying products -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-10">
        @if (products != null && products.Any())
        {
            foreach (var product in products)
            {
                <div class="p-4 border border-gray-300 rounded-lg shadow-lg">
                    <h2 class="text-lg font-semibold mb-2">@product.ProductTitle</h2>
                    <p class="text-sm text-gray-600 mb-2">@product.Description</p>
                    <p class="text-sm text-gray-600 mb-4">Attachments: @product.ProductAttachments?.Count ?? 0</p>
                    <div class="flex justify-end">
                        @* <button class="bg-red-500 text-white px-4 py-2 rounded" @onclick="() => DeleteProduct(product.Id)">Delete</button> *@
                    </div>
                </div>
            }
        }
        else
        {
            <p class="text-center col-span-full text-gray-500">No products available.</p>
        }
    </div>

    <!-- Form to add a new product -->
    <form class="max-w-lg mx-auto p-6 border border-gray-300 rounded-lg shadow-lg bg-white" @onsubmit="AddProduct">
        <h2 class="text-xl font-semibold mb-4">Add New Product</h2>

        <div class="mb-4">
            <label for="title" class="block text-sm font-medium text-gray-700">Product Title</label>
            <input id="title" type="text" class="mt-1 block w-full border border-gray-300 rounded p-2" @bind="newProduct.ProductTitle" required />
        </div>

        <div class="mb-4">
            <label for="description" class="block text-sm font-medium text-gray-700">Description</label>
            <textarea id="description" class="mt-1 block w-full border border-gray-300 rounded p-2" @bind="newProduct.Description"></textarea>
        </div>

        <div class="mb-4">
            <label for="fileUpload" class="block text-sm font-medium text-gray-700">Upload Attachment</label>
            <input id="fileUpload" type="file" class="mt-1 block w-full" @onchange="HandleFileUpload" />
        </div>

        <div class="flex justify-end">
            <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Save Product</button>
        </div>
    </form>
</section>

@code {
    private List<Product> products = new();
    private Product newProduct = new();
    private ProductAttachment? uploadedAttachment;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        products = await Http.GetFromJsonAsync<List<Product>>("api/products") ?? new List<Product>();
    }

    private async Task AddProduct()
    {
        if (!string.IsNullOrEmpty(newProduct.ProductTitle))
        {
            if (uploadedAttachment != null)
            {
                newProduct.ProductAttachments = new List<ProductAttachment> { uploadedAttachment };
            }

            var response = await Http.PostAsJsonAsync("api/products", newProduct);
            if (response.IsSuccessStatusCode)
            {
                newProduct = new Product();
                uploadedAttachment = null;
                await LoadProducts();
            }
        }
    }

    private async Task HandleFileUpload(ChangeEventArgs e)
    {
        var inputFile = e.Value as Microsoft.AspNetCore.Components.Forms.IBrowserFile;

        if (inputFile != null)
        {
            using var memoryStream = new MemoryStream();
            await inputFile.OpenReadStream().CopyToAsync(memoryStream);

            
        }
    }

}